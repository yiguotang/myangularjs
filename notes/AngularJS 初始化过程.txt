1.自动初始化
	两种情况下自动初始化：
		在DomContentLoaded时间触发时；
		在angular.js脚本被执行的同时如果document.readyState被置为'complete'的话。
	初始化时，Angular回去找ng-app(ng.directive:ngApp)这个指明应用开始所在的指令，如果ng-app(ng.directive:ngApp)指令被找到的话，Angular会做一下几件事：
		·加载ng-app指令的模块
		·创建应用所需的injector(AUTO.$injector)
		·以ng-app(ng.directive:ngApp)所在的节点为根节点，开始遍遍历并编译DOM树（ng-app指出了应用的哪一部分开始时Angular去编译的）

		<!doctype html>
		<html ng-app="optionalModuleName">
		  <body>
		    I can add: 3.
		    <script src="angular.js"></script>
		  </body>
		</html>

2.手动加载
	如果你想在初始化阶段拥有更多的控制权，你可以使用手动方法启动应用。
	你需要手动启动的可能会是你想要在你的应用中使用脚本加载器，
	或者你可能想要在 Angular 编译页面之前执行一些别的操作。

	下面是一个手动初始化 Angular 的例子：
	<!doctype html>
	<html xmlns:ng="http://angularjs.org">
	  <body>
	    Hello World!
	    <script src="http://code.angularjs.org/angular.js"></script>
	    <script>
	       angular.element(document).ready(function() {
	         angular.module('myApp', []);
	         angular.bootstrap(document, ['myApp']);
	       });
	    </script>
	  </body>
	</html>

	注意，在上面的例子中，我们提供了我们应用要加载的模块名作为api/angular.bootstrap 函数的第二个参数。
	需要注意的是 angular.bootstrap 不会凭空创建模块，在我们将模块作为参数注入之前，
	必须创建任一自定义的模块（module）。

	以下是你的 Angular 代码运行时遵循的顺序：
	    ·在HTML页面以及所有代码加载完毕后，Angular 会去找到应用的根元素（通常是文档的根节点）
	    ·调用 api/angular.bootstrap 去 编译(compiler) 各元素成为一个可执行的且双向绑定的应用 

3.延迟启动
	这个特色可以让像 Batarang 一样的测试工具横插一杠进入 Angular 的引导进程，
	并且溜进模块中的DI注册机制中，这样就可以替换或者增强DI提供的服务。
	（译注：由于后面一句不甚理解其原理，不敢贸然翻译）

	当api/angular.bootstrap 被调用时，如果 window.name 包含 NG_DEFER_BOOTSTRAP! 前缀，
	引导进程会被暂停直到 angular.resumeBootstrap() 被调用。

	angular.resumeBootstrap() 以一个可选的数组作为参数。这个数组是包含了应用启动时需要被注入的模块。