1.使用过滤器可以格式化数据
   angular自带的几个过滤器：
    	currency，可以将一个数值格式化为货币格式，{{  123 | currency }}

    	data，将日期格式化成需要的格式
      		{{ today | date:'medium' }} <!-- Aug 09, 2013 12:09:02 PM -->
      		{{ today | date:'short' }} <!-- 8/9/1312:09PM -->
      		{{ today | date:'fullDate' }} <!-- Thursday, August 09, 2013 -->
      		{{ today | date:'longDate' }} <!-- August 09, 2013 -->
      		{{ today | date:'mediumDate' }}<!-- Aug 09, 2013 -->
      		{{ today | date:'shortDate' }} <!-- 8/9/13 -->
      		{{ today | date:'mediumTime' }}<!-- 12:09:02 PM -->
      		{{ today | date:'shortTime' }} <!-- 12:09 PM -->
      		年份格式化
            四位年份：{{ today | date:'yyyy' }} <!-- 2013 -->
            两位年份：{{ today | date:'yy' }} <!-- 13 -->
            一位年份：{{ today | date:'y' }} <!-- 2013 -->
          月份格式化
            英文月份：{{ today | date:'MMMM' }} <!-- August -->
            英文月份简写：{{ today | date:'MMM' }} <!-- Aug -->
            数字月份：{{ today |date:'MM' }} <!-- 08 -->
            一年中的第几个月份：{{ today |date:'M' }} <!-- 8 -->
          日期格式化
            数字日期：{{ today|date:'dd' }} <!-- 09 -->
            一个月中的第几天：{{ today | date:'d' }} <!-- 9 -->
            英文星期：{{ today | date:'EEEE' }} <!-- Thursday -->
            英文星期简写：{{ today | date:'EEE' }} <!-- Thu -->
          小时格式化
            24小时制数字小时：{{today|date:'HH'}} <!--00-->
            一天中的第几个小时：{{today|date:'H'}} <!--0-->
            12小时制数字小时：{{today|date:'hh'}} <!--12-->
            上午或下午的第几个小时：{{today|date:'h'}} <!--12-->
          分钟格式化
            数字分钟数：{{ today | date:'mm' }} <!-- 09 -->
            一个小时中的第几分钟：{{ today | date:'m' }} <!-- 9 -->
          秒数格式化
            数字秒数：{{ today | date:'ss' }} <!-- 02 -->
            一分钟内的第几秒：{{ today | date:'s' }} <!-- 2 -->
            毫秒数：{{ today | date:'.sss' }} <!-- .995 -->
          字符格式化
            上下午标识：{{ today | date:'a' }} <!-- AM -->
            四位时区标识：{{ today | date:'Z' }} <!--- 0700 -->
          下面是一些自定义日期格式的示例：
            {{ today | date:'MMMd, y' }} <!-- Aug9, 2013 -->
            {{ today | date:'EEEE, d, M' }} <!-- Thursday, 9, 8-->
            {{ today | date:'hh:mm:ss.sss' }} <!-- 12:09:02.995 -->

    filter，可以从给定的数组中选择一个子集，并将其生成一个新数组返回，这个过滤器通常用来过滤需要进行的元素

    json，可以将一个json或javascript对象转换成字符串，
          {{ {'name': 'Ari', 'City': 'SanFrancisco'} | json }}
          <!--
          {
          "name": "Ari",
          "City": "San Francisco"
          }
          -->

    limitTo，根据传入的参数生成一个新的数组或字符串，新的数组或字符串的长度取决于传入的参数，通过传入参数的正负值来控制是从前面还是从后面开始截取
          我们可以截取字符串的前三个字符：
          {{ San Francisco is very cloudy | limitTo:3 }}
          <!-- San -->
          或最后的六个字符：
          {{ San Francisco is very cloudy | limitTo:-6 }}
          <!-- cloudy -->

    lowercase，将字符串转为小写

    number，将数字格式转换为文本，它的第二个参数是可选的，用来控制小数点后截取的位数，如果传入了一个非数字字符，会返回空字符串
          {{ 123456789 | number }}
          <!-- 1,234,567,890 -->
          {{ 1.234567 | number:2 }}
          <!-- 1.23 -->

    orderBy，可以用表达式对指定的数组进行排序，可以接受两个参数，第一个是必须的，第二个是可选的。
          第一个参数是用来确定排序方向的谓词
            ・函数：
              当第一个是函数时，该函数会被当做该排序对象的getter方法
            ・字符串：
              对这个字符串进行解析的结果将决定数组元素的排序方向。 我们可以传入 + 或 - 来强制进行升序或降序排列。
            ・数组：
              在排序表达式中使用数组元素作为谓词。对于与表达式结果并不严格相等的每个元素，则使用第一个谓词。
          第二个参数用来控制排序的方向（是否逆向）
            例如，我们将下面的对象数组用 name 字段进行排序：
            {{ [{
                  'name': 'Ari',
                  'status': 'awake'
                },{
                  'name': 'Q',
                  'status': 'sleeping'
                },{
                  'name': 'Nate',
                  'status': 'awake'
                }] | orderBy:'name' }}

            <!--
            [
            {"name":"Ari","status":"awake"},
            {"name":"Nate","status":"awake"},
            {"name":"Q","status":"sleeping"}
            ]
            -->
            也可以对排序结果进行反转。 例如， 通过将第二个参数设置为 true 可以将排序结果进行反转：
            {{ [{
                'name': 'Ari',
                'status': 'awake'
                },{
                'name': 'Q',
                'status': 'sleeping'
                },{
                'name': 'Nate',
                'status': 'awake'
                }] | orderBy:'name':true }}
            <!--
                [
                {"name":"Q","status":"sleeping"},
                {"name":"Nate","status":"awake"},
                {"name":"Ari","status":"awake"}
                ]
            -->

    uppercase，将字符串转换为大写形式：
          {{ "San Francisco is very cloudy" | uppercase }}
          <!-- SAN FRANCISCO IS VERY CLOUDY -->
          
2.自定义过滤器
  //标题大写过滤器
  var homeModule =  angular.module('HomeModule', []);
  homeModule.filter( 'titleCase', function () 
  {
    var titleCaseFilter = function(input) 
    {
      var words = input.split ( ' ' );
      
      for(var i  =  0; i < words.length; i++) 
      {
        words[i] = words[i]. charAt(0).toUpperCase() + words[i].slice(1);
      }
      
      return words.join(' ');
    };
    
    return titleCaseFilter;
  });